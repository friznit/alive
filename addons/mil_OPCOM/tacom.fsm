/*%FSM<COMPILE "C:\Program Files (x86)\Bohemia Interactive\Tools\FSM Editor Personal Edition\scriptedFSM.cfg, tacom">*/
/*%FSM<HEAD>*/
/*
item0[] = {"INIT",0,250,-191.791229,-248.493942,-101.791237,-198.494003,0.000000,"INIT"};
item1[] = {"INIT_COMPLETE",4,218,-194.557098,-181.067123,-104.557114,-131.067123,0.000000,"INIT" \n "COMPLETE"};
item2[] = {"ANALYZE",2,4346,-398.915222,114.819130,98.822098,162.683716,0.000000,"ANALYZE"};
item3[] = {"RECEIVE",4,218,-194.508545,8.832397,-104.508537,58.832394,0.000000,"RECEIVE"};
item4[] = {"CAPTURE_Conditio",4,218,-296.383667,193.384125,-206.383591,243.384094,3.000000,"CAPTURE" \n "Conditions"};
item5[] = {"",7,210,171.547714,468.898773,179.547714,476.898743,0.000000,""};
item6[] = {"",7,210,171.743484,135.632568,179.743546,143.632553,0.000000,""};
item7[] = {"DEFEND_condition",4,218,-197.909698,194.460342,-107.909790,244.460342,2.000000,"DEFEND" \n "conditions"};
item8[] = {"RESERVE_conditio",4,218,-98.860970,193.167236,-8.860947,243.167206,1.000000,"RESERVE" \n "conditions"};
item9[] = {"CUSTOM_condition",4,218,5.405207,191.819977,95.405060,241.820114,0.000000,"CUSTOM" \n "conditions"};
item10[] = {"ISSUE_ORDERS",2,250,-410.405151,380.871490,88.862106,425.074554,0.000000,"ISSUE ORDERS"};
item11[] = {"GROUP_NOT_CONFIR",4,218,-150.917450,440.980774,-60.917450,490.980957,0.000000,"GROUP" \n "NOT" \n "CONFIRM"};
item12[] = {"GROUP_CONFIRM",4,218,-255.035446,441.809845,-165.035599,491.809845,0.000000,"GROUP" \n "CONFIRM"};
item13[] = {"",7,210,-514.292969,461.235718,-506.292969,469.235687,0.000000,""};
item14[] = {"",7,210,-512.438843,135.777771,-504.438812,143.777756,0.000000,""};
item15[] = {"INITIALIZE",2,250,-195.246613,-87.998024,-105.246597,-37.998020,0.000000,"INITIALIZE"};
item16[] = {"_",-1,250,-440.685394,-235.585892,-437.600311,-235.585892,0.000000,""};
item17[] = {"TRANSMIT_TO_OPCO",2,250,-382.604065,440.411285,-292.604065,490.411285,0.000000,"TRANSMIT" \n "TO" \n "OPCOM"};
item18[] = {"TRANSMIT_TO_OPCO_1",2,250,-30.464869,437.026642,59.535149,487.026642,0.000000,"TRANSMIT" \n "TO" \n "OPCOM"};
item19[] = {"_",4,218,-482.501801,438.275482,-392.501801,488.275482,0.000000,""};
item20[] = {"_",4,218,68.184074,442.021606,158.184052,492.021606,0.000000,""};
item21[] = {"RECON_Conditions",4,218,-399.338470,195.674927,-309.338470,245.674911,0.000000,"RECON" \n "Conditions"};
version=1;
class LayoutItems
{
	class Item16
	{
		class ItemInfo
		{
			FontFace="Arial";
			FontHeight=10;
			lStyle=1;
		};
	};
};
link0[] = {0,1};
link1[] = {1,15};
link2[] = {2,3};
link3[] = {2,4};
link4[] = {2,7};
link5[] = {2,8};
link6[] = {2,9};
link7[] = {2,21};
link8[] = {3,2};
link9[] = {4,10};
link10[] = {5,6};
link11[] = {6,2};
link12[] = {7,10};
link13[] = {8,10};
link14[] = {9,10};
link15[] = {10,11};
link16[] = {10,12};
link17[] = {11,18};
link18[] = {12,17};
link19[] = {13,14};
link20[] = {14,2};
link21[] = {15,3};
link22[] = {17,19};
link23[] = {18,20};
link24[] = {19,13};
link25[] = {20,5};
link26[] = {21,10};
globals[] = {0.000000,0,0,0,16777215,640,480,1,72,6316128,1,-459.189331,124.635040,697.767517,61.925968,853,929,1};
window[] = {2,-1,-1,-1,-1,1082,198,1821,198,3,870};
*//*%FSM</HEAD>*/
class FSM
{
  fsmName = "tacom";
  class States
  {
    /*%FSM<STATE "INIT">*/
    class INIT
    {
      name = "INIT";
      init = /*%FSM<STATEINIT""">*/"_busy = false;" \n
       "_TAC_confirmed = false;" \n
       "" \n
       "_OPCOM_HANDLER = _this select 0;" \n
       "" \n
       "_debug = [_OPCOM_HANDLER,""debug"",false] call ALiVE_fnc_HashGet;" \n
       "_side = [_OPCOM_HANDLER,""side"",""EAST""] call ALiVE_fnc_HashGet;" \n
       "_sideEnemy = [_OPCOM_HANDLER,""sideenemy"",""WEST""] call ALiVE_fnc_HashGet;" \n
       "" \n
       "_sectionsamount_attack = [_OPCOM_HANDLER,""sectionsamount_attack"",3] call ALiVE_fnc_HashGet;" \n
       "_sectionsamount_reserve = [_OPCOM_HANDLER,""sectionsamount_reserve"",1] call ALiVE_fnc_HashGet;" \n
       "_sectionsamount_defend = [_OPCOM_HANDLER,""sectionsamount_defend"",2] call ALiVE_fnc_HashGet;" \n
       "" \n
       "_OPCOM_FSM =  [_OPCOM_HANDLER,""OPCOM_FSM""] call ALiVE_fnc_HashGet;" \n
       "_TACOM_FSM =  [_OPCOM_HANDLER,""TACOM_FSM""] call ALiVE_fnc_HashGet;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "INIT_COMPLETE">*/
        class INIT_COMPLETE
        {
          priority = 0.000000;
          to="INITIALIZE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(_TACOM_FSM < 0);"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "ANALYZE">*/
    class ANALYZE
    {
      name = "ANALYZE";
      init = /*%FSM<STATEINIT""">*/"private [""_operation"",""_data_operation"",""_data_value"",""_tacom_data"",""_recon"",""_capture"",""_defend"",""_reserve"",""_custom"",""_dataset"",""_transmit""];" \n
       "" \n
       "_busy = true;" \n
       "_lastAnalyze = time;" \n
       "" \n
       "_recon = nil;" \n
       "_capture = nil;" \n
       "_defend = nil;" \n
       "_reserve = nil;" \n
       "_custom = nil;" \n
       "" \n
       "_section = [];" \n
       "_sections = [];" \n
       "" \n
       "//start operating if data received" \n
       "if !(isnil ""_TACOM_DATA"") then {" \n
       "	_DATA_OPERATION = _TACOM_DATA select 0;" \n
       "	_DATA_VALUE = _TACOM_DATA select 1;" \n
       "	_TACOM_DATA = nil;" \n
       "" \n
       "	//select data operation" \n
       "	switch (_DATA_OPERATION) do {" \n
       "		" \n
       "		//Analyze sent data" \n
       "		case (""analyze"") : {" \n
       "			_objective = _DATA_VALUE;" \n
       "			_pos = [_objective,""center""] call AliVE_fnc_HashGet;" \n
       "			_opcom_orders = [_objective,""opcom_orders""] call AliVE_fnc_HashGet;" \n
       "" \n
       "			// debug ---------------------------------------" \n
       "			if(_debug) then {" \n
       "				[""TACOM analyse""] call ALIVE_fnc_dump;" \n
       "				//[true] call ALIVE_fnc_timer;" \n
       "			};" \n
       "			// debug ---------------------------------------		" \n
       "" \n
       "			//select internal TACOM orders by global OPCOM order and set appropriate conditions for execution" \n
       "			switch (_opcom_orders) do {" \n
       "" \n
       "				case (""attack"") : {" \n
       "					[_OPCOM_HANDLER,""cleanupduplicatesections""] call ALiVE_fnc_OPCOM;" \n
       "" \n
       "					_section = [_objective,""section"",[]] call AliVE_fnc_HashGet;" \n
       "					_danger = [_objective,""danger"",-1] call AliVE_fnc_HashGet;" \n
       "" \n
       "					if (count _section < _sectionsamount_attack) then {" \n
       "						_section = [_OPCOM_HANDLER,""NearestAvailableSection"",[_pos,""attack"",_sectionsamount_attack,_objective]] call ALiVE_fnc_OPCOM;" \n
       "						[_objective,""section"",_section] call AliVE_fnc_HashSet;" \n
       "					};" \n
       "" \n
       "					switch (_danger < 1) do {" \n
       "						case (true) : {_recon = [_objective,_section]};" \n
       "						case (false) : {_capture = [_objective,_section]};" \n
       "					};" \n
       "				};" \n
       "" \n
       "				case (""defend"") : {" \n
       "					[_OPCOM_HANDLER,""cleanupduplicatesections""] call ALiVE_fnc_OPCOM;" \n
       "" \n
       "					_section = [_objective,""section"",[]] call AliVE_fnc_HashGet;" \n
       "					_nearEnemies = [_objective,""entitiesnearsector"",_sideEnemy] call AliVE_fnc_OPCOM;" \n
       "" \n
       "					if (count _section < _sectionsamount_defend) then {" \n
       "						_section = [_OPCOM_HANDLER,""NearestAvailableSection"",[_pos,""defend"",_sectionsamount_defend,_objective]] call ALiVE_fnc_OPCOM;" \n
       "						[_objective,""section"",_section] call AliVE_fnc_HashSet;" \n
       "					};" \n
       "" \n
       "					switch (count _nearEnemies > 0) do {" \n
       "						case (true) : {_defend = [_objective,_section]};" \n
       "						case (false) : {_reserve = [_objective,_section]};" \n
       "					};" \n
       "				};" \n
       "		" \n
       "				case (""reserve"") : {" \n
       "					[_OPCOM_HANDLER,""cleanupduplicatesections""] call ALiVE_fnc_OPCOM;" \n
       "					_section = [_objective,""section"",[]] call AliVE_fnc_HashGet;" \n
       "" \n
       "					if (count _section < _sectionsamount_reserve) then {" \n
       "						_section = [_OPCOM_HANDLER,""NearestAvailableSection"",[_pos,""reserve"",_sectionsamount_reserve,_objective]] call ALiVE_fnc_OPCOM;" \n
       "						[_objective,""section"",_section] call AliVE_fnc_HashSet;" \n
       "					};" \n
       "" \n
       "					_reserve = [_objective,_section];" \n
       "				};" \n
       "				case (""custom"") : {};" \n
       "				default {};" \n
       "			};" \n
       "" \n
       "			// debug ---------------------------------------" \n
       "			if(_debug) then {" \n
       "				[""TACOM analysed""] call ALIVE_fnc_dump;" \n
       "				//[] call ALIVE_fnc_timer;" \n
       "			};" \n
       "			// debug ---------------------------------------		" \n
       "" \n
       "		};" \n
       "" \n
       "		//handle internal order completion by TACOM order state" \n
       "		case (""completed"") : {" \n
       "			private [""_ProfileID""];" \n
       "" \n
       "			_ProfileID = _DATA_VALUE select 0;" \n
       "			_objectiveID = _DATA_VALUE select 1;" \n
       "			_orders = _DATA_VALUE select 2;" \n
       "" \n
       "			// debug ---------------------------------------" \n
       "			if(_debug) then {" \n
       "				[""TACOM order completed""] call ALIVE_fnc_dump;" \n
       "				//[true] call ALIVE_fnc_timer;" \n
       "			};" \n
       "			// debug ---------------------------------------	" \n
       "" \n
       "			_objective = [_OPCOM_HANDLER,""getobjectivebyid"",_objectiveID] call ALiVE_fnc_OPCOM;" \n
       "			_section = [_objective,""section""] call AliVE_fnc_HashGet;" \n
       "			_state = [_objective,""tacom_state""] call AliVE_fnc_HashGet;" \n
       "			_transmit = !([_objective,""opcom_state""] call AliVE_fnc_HashGet == ""internal"");" \n
       "			_dataset = nil;" \n
       "" \n
       "			switch (_state) do {" \n
       "				case (""recon"") : {" \n
       "					if !([_OPCOM_HANDLER,""synchronizeorders"",_ProfileID] call ALiVE_fnc_OPCOM) exitwith {" \n
       "						// debug ---------------------------------------" \n
       "						if(_debug) then { [""TACOM %1 regrouping! Waiting for %2 groups!"",_ProfileID,({_objectiveID == (_x select 2)} count ([_OPCOM_HANDLER,""pendingorders"",[]] call ALiVE_fnc_HashGet))] call ALIVE_fnc_dumpR; };" \n
       "						// debug ---------------------------------------" \n
       "					};" \n
       "" \n
       "						// TBD: Calculate danger level depending on recon outcome (sector analysis)" \n
       "						[_objective,""danger"",5] call AliVE_fnc_HashSet;" \n
       "" \n
       "						//dont transmit recon to opcom as objective is not captured yet" \n
       "						_dataset = {_TACOM_DATA = [""analyze"",_objective]};" \n
       "				};" \n
       "				case (""capture"") : {" \n
       "					if !([_OPCOM_HANDLER,""synchronizeorders"",_ProfileID] call ALiVE_fnc_OPCOM) exitwith {" \n
       "						// debug ---------------------------------------" \n
       "						if(_debug) then { [""TACOM %1 regrouping! Waiting for %2 groups!"",_ProfileID,({_objectiveID == (_x select 2)} count ([_OPCOM_HANDLER,""pendingorders"",[]] call ALiVE_fnc_HashGet))] call ALIVE_fnc_dumpR; };" \n
       "						// debug ---------------------------------------" \n
       "					};" \n
       "					" \n
       "						//transmit to OPCOM as objective was completed" \n
       "						_dataset = {_OPCOM_FSM setFSMVariable [""_OPCOM_DATA"",[""completed"",_objective]]};" \n
       "				};" \n
       "				case (""defend"") : {" \n
       "					if !([_OPCOM_HANDLER,""synchronizeorders"",_ProfileID] call ALiVE_fnc_OPCOM) exitwith {" \n
       "						// debug ---------------------------------------" \n
       "						if(_debug) then { [""TACOM %1 regrouping! Waiting for %2 groups!"",_ProfileID,({_objectiveID == (_x select 2)} count ([_OPCOM_HANDLER,""pendingorders"",[]] call ALiVE_fnc_HashGet))] call ALIVE_fnc_dumpR; };" \n
       "						// debug ---------------------------------------" \n
       "					};" \n
       "				" \n
       "							//dont transmit defend as long as entities are near" \n
       "							_dataset = {_TACOM_DATA = [""analyze"",_objective]};" \n
       "				};" \n
       "				case (""reserve"") : {" \n
       "					_ProfilesReserve = [_OPCOM_HANDLER,""ProfileIDsReserve"",[]] call ALiVE_fnc_HashGet;" \n
       "					if !(_ProfileID in _ProfilesReserve) then {" \n
       "						[_OPCOM_HANDLER,""ProfileIDsReserve"",_ProfilesReserve + [_ProfileID]] call ALiVE_fnc_HashSet;" \n
       "					};" \n
       "" \n
       "					if !([_OPCOM_HANDLER,""synchronizeorders"",_ProfileID] call ALiVE_fnc_OPCOM) exitwith {" \n
       "						// debug ---------------------------------------" \n
       "						if(_debug) then { [""TACOM %1 regrouping! Waiting for %2 groups!"",_ProfileID,({_objectiveID == (_x select 2)} count ([_OPCOM_HANDLER,""pendingorders"",[]] call ALiVE_fnc_HashGet))] call ALIVE_fnc_dumpR; };" \n
       "						// debug ---------------------------------------" \n
       "					};" \n
       "" \n
       "						//transmit to OPCOM as objective was completed" \n
       "						_dataset = {_OPCOM_FSM setFSMVariable [""_OPCOM_DATA"",[""completed"",_objective]]};" \n
       "				};" \n
       "				default {_dataset = {}};" \n
       "			};" \n
       "			if !(isnil ""_dataset"") then {if (_transmit) then {call _dataset}};" \n
       "" \n
       "			// debug ---------------------------------------" \n
       "			if(_debug) then {" \n
       "				[""TACOM order completed complete""] call ALIVE_fnc_dump;" \n
       "				//[true] call ALIVE_fnc_timer;" \n
       "			};" \n
       "			// debug ---------------------------------------	" \n
       "		};" \n
       "		default {};" \n
       "	};" \n
       "	_busy = false" \n
       "} else {" \n
       "	_busy = false;" \n
       "};"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "CAPTURE_Conditio">*/
        class CAPTURE_Conditio
        {
          priority = 3.000000;
          to="ISSUE_ORDERS";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_capture"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "DEFEND_condition">*/
        class DEFEND_condition
        {
          priority = 2.000000;
          to="ISSUE_ORDERS";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_defend"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "RESERVE_conditio">*/
        class RESERVE_conditio
        {
          priority = 1.000000;
          to="ISSUE_ORDERS";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_reserve"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "CUSTOM_condition">*/
        class CUSTOM_condition
        {
          priority = 0.000000;
          to="ISSUE_ORDERS";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_custom"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "RECON_Conditions">*/
        class RECON_Conditions
        {
          priority = 0.000000;
          to="ISSUE_ORDERS";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_recon"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "RECEIVE">*/
        class RECEIVE
        {
          priority = 0.000000;
          to="ANALYZE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_TACOM_DATA"") && !(_busy);"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "ISSUE_ORDERS">*/
    class ISSUE_ORDERS
    {
      name = "ISSUE_ORDERS";
      init = /*%FSM<STATEINIT""">*/"private [""_data""];" \n
       "" \n
       "//Get all profileIDs and objectives" \n
       "_profiles = ([ALIVE_profileHandler, ""getProfiles"", ""entity""] call ALIVE_fnc_profileHandler) select 1;" \n
       "_objectives = [_OPCOM_HANDLER,""objectives""] call ALiVE_fnc_HashGet;" \n
       "" \n
       "//prepare orders" \n
       "if !(isnil ""_recon"") then {_operation = ""recon""};" \n
       "if !(isnil ""_capture"") then {_operation = ""capture""};" \n
       "if !(isnil ""_defend"") then {_operation = ""defend""};" \n
       "if !(isnil ""_reserve"") then {_operation = ""reserve""};" \n
       "if !(isnil ""_custom"") then {_operation = ""custom""};" \n
       "" \n
       "//_data = [_OPCOM_HANDLER,""addTask"",[_operation,_pos,_section,_statements]] call ALiVE_fnc_OPCOM;" \n
       "" \n
       "//set orders by type" \n
       "switch (_operation) do {" \n
       "" \n
       "		case ( ""recon"") : {" \n
       "			_objective = _recon select 0;" \n
       "			_state = [_objective,""opcom_state""] call ALiVE_fnc_HashGet;" \n
       "			_section = [_objective,""section""] call AliVE_fnc_HashGet;" \n
       "			_pos = [_objective,""center""] call AliVE_fnc_HashGet;" \n
       "			_objectiveID = [_objective,""objectiveID""] call AliVE_fnc_HashGet;" \n
       "			_turn = true;" \n
       "" \n
       "			if (count _section >= _sectionsamount_attack) then {" \n
       "				[_objective,""tacom_state"",""recon""] call AliVE_fnc_HashSet;" \n
       "" \n
       "				{" \n
       "					_profileID = _x;" \n
       "" \n
       "					if (_profileID in _profiles) then {" \n
       "						_profile = [ALIVE_profileHandler, ""getProfile"", _profileID] call ALIVE_fnc_profileHandler;" \n
       "" \n
       "						//Select recon postion in angle to objectve" \n
       "						_posP = [_profile, ""position""] call ALIVE_fnc_profileEntity;" \n
       "						_direction = [_pos, _posP] call BIS_fnc_dirTo;" \n
       "						_newPosition = [_pos, 300, _direction] call BIS_fnc_relPos;" \n
       "						if (_turn) then {_direction = _direction - 90;_turn = false} else {_direction = _direction + 90;_turn = true};" \n
       "						_newPosition = [_newPosition, 150, _direction] call BIS_fnc_relPos;" \n
       "						_posWP = [_newPosition,50] call CBA_fnc_Randpos;" \n
       "" \n
       "						[_OPCOM_HANDLER,""setorders"",[_posWP,_profileID,_objectiveID,_operation]] call ALiVE_fnc_OPCOM;" \n
       "					};" \n
       "				} foreach _section;" \n
       "				" \n
       "				_TAC_confirmed = true;" \n
       "			} else {" \n
       "				if (count _section == 0) then {" \n
       "					_TAC_confirmed = false;" \n
       "					_recon set [1,[""no groups available""]];" \n
       "				} else {" \n
       "					{" \n
       "						_profileID = _x;" \n
       "" \n
       "						if (_profileID in _profiles) then {" \n
       "							_profile = [ALIVE_profileHandler, ""getProfile"", _profileID] call ALIVE_fnc_profileHandler;" \n
       "" \n
       "							//Select nearest taken objective to regroup" \n
       "							_posP = [_profile, ""position""] call ALIVE_fnc_profileEntity;" \n
       "							_objectives = [_objectives,[],{_posP distance (_x select 2 select 1)},""ASCEND""] call BIS_fnc_sortBy;" \n
       "							" \n
       "							{" \n
       "								_state = [_x,""opcom_state""] call ALivE_fnc_HashGet;" \n
       "								" \n
       "								if (_state == ""idle"") exitwith {" \n
       "									_objectiveID = [_x,""objectiveID""] call ALiVE_fnc_HashGet;" \n
       "									_posWP = [_x,""center""] call ALiVE_fnc_HashGet;" \n
       "									[_profile, ""clearWaypoints""] call ALIVE_fnc_profileEntity;" \n
       "									_profileWaypoint = [_posWP, 50] call ALIVE_fnc_createProfileWaypoint;" \n
       "									[_profile, ""addWaypoint"", _profileWaypoint] call ALIVE_fnc_profileEntity;" \n
       "								};" \n
       "							} foreach _objectives;" \n
       "						};" \n
       "					} foreach _section;" \n
       "" \n
       "					_TAC_confirmed = false;" \n
       "					_recon set [1,[""not enough groups to build a section, regrouping...""]];" \n
       "				};" \n
       "			};" \n
       "			_data = _recon;" \n
       "		};" \n
       "" \n
       "		case ( ""capture"") : {" \n
       "			_objective = _capture select 0;" \n
       "			_state = [_objective,""opcom_state""] call ALiVE_fnc_HashGet;" \n
       "			_section = [_objective,""section""] call AliVE_fnc_HashGet;" \n
       "			_pos = [_objective,""center""] call AliVE_fnc_HashGet;" \n
       "			_objectiveID = [_objective,""objectiveID""] call AliVE_fnc_HashGet;" \n
       "" \n
       "			if (count _section > 0) then {" \n
       "				[_objective,""tacom_state"",""capture""] call AliVE_fnc_HashSet;" \n
       "				diag_log format[""_capture _objective %1 _pos %2 _section %3"",_objective,_pos,_section];" \n
       "" \n
       "				{" \n
       "					private [""_profile"",""_profileID"",""_statements""];" \n
       "" \n
       "						_profileID = _x;" \n
       "" \n
       "						if (_profileID in _profiles) then {" \n
       "							_profile = [ALIVE_profileHandler, ""getProfile"", _profileID] call ALIVE_fnc_profileHandler;" \n
       "" \n
       "							[_OPCOM_HANDLER,""setorders"",[([_pos,50] call CBA_fnc_RandPos),_profileID,_objectiveID,_operation]] call ALiVE_fnc_OPCOM;" \n
       "						};" \n
       "				} foreach _section;" \n
       "" \n
       "				_TAC_confirmed = false;" \n
       "				_capture set [1,[""operation attack not finished""]];" \n
       "			} else {" \n
       "				_TAC_confirmed = false;" \n
       "				_capture set [1,[""no groups available""]];" \n
       "			};" \n
       "			_data = _capture;" \n
       "		};" \n
       "" \n
       "		case (""defend"") : {" \n
       "			_objective = _defend select 0;" \n
       "			_state = [_objective,""opcom_state""] call ALiVE_fnc_HashGet;" \n
       "			_section = [_objective,""section""] call AliVE_fnc_HashGet;" \n
       "			_pos = [_objective,""center""] call AliVE_fnc_HashGet;" \n
       "			_objectiveID = [_objective,""objectiveID""] call AliVE_fnc_HashGet;" \n
       "" \n
       "			if (count _section > 0) then {" \n
       "				[_objective,""tacom_state"",""defend""] call AliVE_fnc_HashSet;" \n
       "				diag_log format[""_defend _objective %1 _pos %2 _section %3"",_objective,_pos,_section];" \n
       "" \n
       "				{" \n
       "					private [""_profile"",""_profileID"",""_statements""];" \n
       "" \n
       "						_profileID = _x;" \n
       "" \n
       "						if (_profileID in _profiles) then {" \n
       "							_profile = [ALIVE_profileHandler, ""getProfile"", _profileID] call ALIVE_fnc_profileHandler;" \n
       "" \n
       "							[_OPCOM_HANDLER,""setorders"",[([_pos,50] call CBA_fnc_RandPos),_profileID,_objectiveID,_operation]] call ALiVE_fnc_OPCOM;" \n
       "						};" \n
       "				} foreach _section;" \n
       "" \n
       "				_TAC_confirmed = true;" \n
       "			} else {" \n
       "				_TAC_confirmed = false;" \n
       "				_defend set [1,[""no groups available""]];" \n
       "			};" \n
       "			_data = _defend;" \n
       "		};" \n
       "" \n
       "		case ( ""reserve"") : {" \n
       "			_objective = _reserve select 0;" \n
       "			_state = [_objective,""opcom_state""] call ALiVE_fnc_HashGet;" \n
       "			_section = [_objective,""section""] call AliVE_fnc_HashGet;" \n
       "			_pos = [_objective,""center""] call AliVE_fnc_HashGet;" \n
       "			_objectiveID = [_objective,""objectiveID""] call AliVE_fnc_HashGet;" \n
       "" \n
       "			if (count _section > 0) then {" \n
       "				[_objective,""tacom_state"",""reserve""] call AliVE_fnc_HashSet;" \n
       "" \n
       "				{" \n
       "					private [""_profile"",""_profileID"",""_statements""];" \n
       "" \n
       "						_profileID = _x;" \n
       "" \n
       "						if (_profileID in _profiles) then {" \n
       "							_profile = [ALIVE_profileHandler, ""getProfile"", _profileID] call ALIVE_fnc_profileHandler;" \n
       "" \n
       "							[_OPCOM_HANDLER,""setorders"",[([_pos,50] call CBA_fnc_RandPos),_profileID,_objectiveID,_operation]] call ALiVE_fnc_OPCOM;" \n
       "						};" \n
       "				} foreach _section;" \n
       "" \n
       "				_TAC_confirmed = true;" \n
       "			} else {" \n
       "				_TAC_confirmed = false;" \n
       "				_reserve set [1,[""no groups available""]];" \n
       "			};" \n
       "			_data = _reserve;" \n
       "		};" \n
       "		case (""custom"") : {};" \n
       "		default {};" \n
       "};"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "GROUP_CONFIRM">*/
        class GROUP_CONFIRM
        {
          priority = 0.000000;
          to="TRANSMIT_TO_OPCO";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_TAC_confirmed;"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "GROUP_NOT_CONFIR">*/
        class GROUP_NOT_CONFIR
        {
          priority = 0.000000;
          to="TRANSMIT_TO_OPCO_1";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!_TAC_confirmed"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "INITIALIZE">*/
    class INITIALIZE
    {
      name = "INITIALIZE";
      init = /*%FSM<STATEINIT""">*/"// debug ---------------------------------------" \n
       "if(_debug) then { [""TACOM initialized, %1!"",true] call ALIVE_fnc_dumpR; };" \n
       "// debug ---------------------------------------" \n
       ""/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "RECEIVE">*/
        class RECEIVE
        {
          priority = 0.000000;
          to="ANALYZE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_TACOM_DATA"") && !(_busy);"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "TRANSMIT_TO_OPCO">*/
    class TRANSMIT_TO_OPCO
    {
      name = "TRANSMIT_TO_OPCO";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_FSM setFSMVariable [""_OPCOM_DATA"",[""confirmed"",[true,_data]]];"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "_">*/
        class _
        {
          priority = 0.000000;
          to="ANALYZE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/""/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "TRANSMIT_TO_OPCO_1">*/
    class TRANSMIT_TO_OPCO_1
    {
      name = "TRANSMIT_TO_OPCO_1";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_FSM setFSMVariable [""_OPCOM_DATA"",[""confirmed"",[false,_data]]];"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "_">*/
        class _
        {
          priority = 0.000000;
          to="ANALYZE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/""/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
  };
  initState="INIT";
  finalStates[] =
  {
  };
};
/*%FSM</COMPILE>*/