/*%FSM<COMPILE "C:\Program Files (x86)\Bohemia Interactive\Tools\FSM Editor Personal Edition\scriptedFSM.cfg, opcom">*/
/*%FSM<HEAD>*/
/*
item0[] = {"INIT",0,250,-717.630066,-1005.371277,-627.630066,-955.371338,0.000000,"INIT"};
item1[] = {"INIT_COMPLETE",4,218,-720.395935,-937.944458,-630.395935,-887.944458,0.000000,"INIT" \n "COMPLETE"};
item2[] = {"ANALYZE",2,4346,-922.720703,-597.062744,-424.983490,-549.198242,0.000000,"ANALYZE"};
item3[] = {"OPCOM_FEEDER",4,218,-719.710510,-506.882813,-629.710571,-456.882813,1.000000,"OPCOM" \n "FEEDER"};
item4[] = {"ATTACK_Condition",4,218,-932.135986,-489.681396,-842.135864,-439.681396,5.000000,"ATTACK" \n "Conditions"};
item5[] = {"",7,210,-348.663452,-250.421844,-340.663422,-242.421814,0.000000,""};
item6[] = {"",7,210,-347.610199,-817.749023,-339.610168,-809.749023,0.000000,""};
item7[] = {"DEFEND_condition",4,218,-795.001099,-490.397827,-705.001099,-440.397827,4.000000,"DEFEND" \n "conditions"};
item8[] = {"RESERVE_conditio",4,218,-650.079163,-488.418213,-560.079102,-438.418213,3.000000,"RESERVE" \n "conditions"};
item9[] = {"OPCOM_RECEIVER",4,218,-717.074463,-838.579346,-627.074646,-788.579346,0.000000,"OPCOM" \n "RECEIVER"};
item10[] = {"CUSTOM_condition",4,218,-509.663391,-488.691589,-419.663483,-438.691589,2.000000,"CUSTOM" \n "conditions"};
item11[] = {"ORDER_TACOM",2,250,-932.369202,-381.311951,-433.101898,-337.108856,0.000000,"ORDER" \n "TACOM"};
item12[] = {"TACOM_CONFIRM",4,218,-680.934143,-271.978882,-590.934143,-221.978882,0.000000,"TACOM" \n "CONFIRM"};
item13[] = {"TACOM_NOT_CONFIR",4,218,-775.473389,-273.065552,-685.473511,-223.065552,0.000000,"TACOM" \n "NOT CONFIRM"};
item14[] = {"",7,210,-1038.766113,-251.892700,-1030.765869,-243.892700,0.000000,""};
item15[] = {"_",-1,250,-440.685394,-235.585892,-437.600311,-235.585892,0.000000,""};
item16[] = {"",7,210,-1032.922607,-816.473755,-1024.922607,-808.473755,0.000000,""};
item17[] = {"INITIALIZE",2,250,-721.197266,-875.105042,-625.643738,-851.020447,0.000000,"INITIALIZE"};
item18[] = {"NOT_BUSY",2,250,-933.784180,-271.617401,-843.784180,-221.617401,0.000000,"NOT BUSY"};
item19[] = {"NOT_BUSY_1",2,250,-550.193359,-270.530762,-460.193329,-220.530762,0.000000,"NOT BUSY"};
item20[] = {"COLLECT_TO_QUEUE",2,250,-717.154053,-759.634521,-627.154053,-709.634521,0.000000,"COLLECT" \n "TO QUEUE"};
item21[] = {"ENTRIES_IN_QUEUE",4,218,-716.046936,-682.136108,-626.046936,-632.136108,0.000000,"ENTRIES" \n "IN QUEUE"};
version=1;
class LayoutItems
{
	class Item15
	{
		class ItemInfo
		{
			FontFace="Arial";
			FontHeight=10;
			lStyle=1;
		};
	};
};
link0[] = {0,1};
link1[] = {1,17};
link2[] = {2,3};
link3[] = {2,4};
link4[] = {2,7};
link5[] = {2,8};
link6[] = {2,9};
link7[] = {2,10};
link8[] = {3,2};
link9[] = {4,11};
link10[] = {5,6};
link11[] = {6,9};
link12[] = {7,11};
link13[] = {8,11};
link14[] = {9,20};
link15[] = {10,11};
link16[] = {11,12};
link17[] = {11,13};
link18[] = {12,19};
link19[] = {13,18};
link20[] = {14,16};
link21[] = {16,9};
link22[] = {17,9};
link23[] = {18,14};
link24[] = {19,5};
link25[] = {20,21};
link26[] = {21,2};
globals[] = {0.000000,0,0,0,16777215,640,480,1,68,6316128,1,-1006.330872,-207.511536,-239.548660,-1031.547729,937,929,1};
window[] = {2,-1,-1,-1,-1,1015,66,1799,66,3,954};
*//*%FSM</HEAD>*/
class FSM
{
  fsmName = "opcom";
  class States
  {
    /*%FSM<STATE "INIT">*/
    class INIT
    {
      name = "INIT";
      init = /*%FSM<STATEINIT""">*/"_busy = false;" \n
       "" \n
       "_OPCOM_HANDLER = _this select 0;" \n
       "_OPCOM_FSM =  [_OPCOM_HANDLER,""OPCOM_FSM""] call ALiVE_fnc_HashGet;" \n
       "_TACOM_FSM =  [_OPCOM_HANDLER,""TACOM_FSM""] call ALiVE_fnc_HashGet;" \n
       "" \n
       "_debug = [_OPCOM_HANDLER,""debug"",false] call ALiVE_fnc_HashGet;" \n
       "_side = [_OPCOM_HANDLER,""side"",""EAST""] call ALiVE_fnc_HashGet;" \n
       "_sideEnemy = [_OPCOM_HANDLER,""sideenemy"",""EAST""] call ALiVE_fnc_HashGet;" \n
       "" \n
       "_OPCOM_QUEUE = [];" \n
       "_objectives = [];" \n
       "_targets = [];" \n
       "_lastanalyze = 0;" \n
       "" \n
       "_colorside = ""ColorRed"";" \n
       "switch (_side) do {" \n
       "	case (""WEST"") : {_colorside = ""ColorBlue""};" \n
       "	case (""EAST"") : {_colorside = ""ColorRed""};" \n
       "};" \n
       "" \n
       "// debug ---------------------------------------" \n
       "if(_debug) then {" \n
       "	[ ""OPCOM INIT""] call ALIVE_fnc_dumpR;" \n
       "	//[true] call ALIVE_fnc_timer;" \n
       "};" \n
       "// debug ---------------------------------------" \n
       "" \n
       "_objectives = [_OPCOM_HANDLER,""objectives"",[_OPCOM_HANDLER,""createobjectivesbydistance"",SEP] call ALiVE_fnc_OPCOM] call ALiVE_fnc_OPCOM;" \n
       "" \n
       "/*" \n
       "//Mock targets for testing purposes" \n
       "						_objectives_unsorted = [" \n
       "									[[2815.68,1190.84,0],150,""civilian"",25]," \n
       "									[[2387.99,1623.91,0],100,""civilian"",50]," \n
       "									[[2951.52,1866,0],50,""civilian"",75]," \n
       "									[[2383.95,1973.6,0],100,""civilian"",50]," \n
       "									[[3300.31,2527.79,0],100,""civilian"",50]," \n
       "									[[3063.56,2140.04,0],100,""civilian"",50]," \n
       "									[[2325.01,2287.62,0],100,""civilian"",50]" \n
       "						];" \n
       "" \n
       "						_objectives = [_objectives_unsorted,[],{([_OPCOM_HANDLER,""position""] call ALiVE_fnc_HashGet) distance (_x select 0)},""ASCEND""] call BIS_fnc_sortBy;" \n
       "						" \n
       "						//Create objectives for OPCOM and set it on the OPCOM Handler " \n
       "						//GetObjectivesByPriority" \n
       "						{" \n
       "									_target = [nil, ""createhashobject""] call ALIVE_fnc_OPCOM;" \n
       "						" \n
       "									_id = format[""OPCOM_objective_%1_%2"",_side,_foreachIndex]; [_target, ""objectiveID"",_id] call ALIVE_fnc_HashSet;" \n
       "									_pos = _x select 0; [_target, ""center"",_pos] call ALIVE_fnc_HashSet;" \n
       "									_size = _x select 1; [_target, ""size"",_size] call ALIVE_fnc_HashSet;" \n
       "									_type = _x select 2; [_target, ""type"",_type] call ALIVE_fnc_HashSet;" \n
       "									_priority = _x select 3; [_target, ""priority"",_priority] call ALIVE_fnc_HashSet;" \n
       "									_opcom_state = ""unassigned""; [_target, ""opcom_state"",_opcom_state] call ALIVE_fnc_HashSet;" \n
       "						" \n
       "									if  (_debug) then {" \n
       "						            	_m = createMarkerLocal [_id, _pos];" \n
       "										_m setMarkerShapeLocal ""RECTANGLE"";" \n
       "										_m setMarkerSizeLocal [_size, _size];" \n
       "										_m setMarkerTypeLocal ""hd_dot"";" \n
       "										_m setMarkerColorLocal ""ColorWhite"";" \n
       "										_m setMarkerTextLocal format[""Objective Priority %1"",_foreachIndex];" \n
       "									};" \n
       "						" \n
       "									_objectives set [_forEachIndex, _target];" \n
       "						 } foreach _objectives;" \n
       "" \n
       "_objectives = [_OPCOM_HANDLER,""objectives"",_objectives] call ALiVE_fnc_OPCOM;" \n
       "*/" \n
       "" \n
       "// debug ---------------------------------------" \n
       "if(_debug) then {" \n
       "	[ ""OPCOM INIT COMPLETE ""] call ALIVE_fnc_dumpR;" \n
       "	[ ""OPCOM Objectives: %1"",_objectives] call ALIVE_fnc_dump;" \n
       "	//_objectives call ALIVE_fnc_inspectHash; // bugged??" \n
       "	//[] call ALIVE_fnc_timer;" \n
       "};" \n
       "// debug ---------------------------------------"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "INIT_COMPLETE">*/
        class INIT_COMPLETE
        {
          priority = 0.000000;
          to="INITIALIZE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"true"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "ANALYZE">*/
    class ANALYZE
    {
      name = "ANALYZE";
      init = /*%FSM<STATEINIT""">*/"private [""_target"",""_attack"",""_defend"",""_reserve"",""_custom"",""_operation"",""_data_operation"",""_data_value"",""_targetsWithState"",""_OPCOM_ACTION""];" \n
       "" \n
       "_busy = true;" \n
       "" \n
       "_target = nil;" \n
       "_attack = nil;" \n
       "_defend = nil;" \n
       "_reserve = nil;" \n
       "_custom = nil;" \n
       "" \n
       "_data_operation = nil;" \n
       "_data_value = nil;" \n
       "" \n
       "if (count _OPCOM_QUEUE > 0) then {" \n
       "	_OPCOM_ACTION = _OPCOM_QUEUE select 0;" \n
       "	_OPCOM_QUEUE set [0,""x""];" \n
       "	_OPCOM_QUEUE = _OPCOM_QUEUE - [""x""];" \n
       "};" \n
       "" \n
       "_timeout = ((isnil ""_OPCOM_ACTION"") && {(time - _lastAnalyze) >= 60});" \n
       "if (_timeout) then {_OPCOM_ACTION = [""analyze"",nil]};" \n
       "" \n
       "//start operating if data was received" \n
       "if !(isnil ""_OPCOM_ACTION"") then {" \n
       "	_DATA_OPERATION = _OPCOM_ACTION select 0;" \n
       "	_DATA_VALUE = _OPCOM_ACTION select 1;" \n
       "	_OPCOM_ACTION = nil;" \n
       "" \n
       "	//select operation type" \n
       "	switch (_DATA_OPERATION) do {" \n
       "		case (""init"") : {" \n
       "			_OPCOM_DATA= [""analyze"",nil]; _busy = false;" \n
       "" \n
       "			// debug ---------------------------------------" \n
       "			if(_debug) then { [""OPCOM initialized, %1!"",_DATA_VALUE] call ALIVE_fnc_dumpR; };" \n
       "			// debug ---------------------------------------" \n
       "" \n
       "		};" \n
       "" \n
       "		case (""analyze"") : {" \n
       "			private[""_orders"",""_result"",""_targetsWithState""];" \n
       "			" \n
       "			//Check TACOMs answer (neutral anaylsis if you pass nil to it, see below)" \n
       "			if !(isnil ""_DATA_VALUE"") then {" \n
       "				switch (_DATA_VALUE) do {" \n
       "					case (""no groups available"") : {_OPCOM_DATA = nil};" \n
       "					default {};" \n
       "				};" \n
       "			};" \n
       "" \n
       "			// debug ---------------------------------------" \n
       "			if(_debug) then {" \n
       "				[""---------------------""] call ALIVE_fnc_dump;" \n
       "				[""OPCOM analyse""] call ALIVE_fnc_dump;" \n
       "				//[true] call ALIVE_fnc_timer;" \n
       "			};" \n
       "			// debug ---------------------------------------		" \n
       "			" \n
       "			//Intensive calcs, only do on regular timeout analysis" \n
       "			if (_timeout) then {" \n
       "				" \n
       "				//Update profiles grid analysis" \n
       "				//[] spawn {[ALIVE_sectorGrid] call ALIVE_fnc_gridAnalysisProfiles};" \n
       "			};" \n
       "" \n
       "			//Get objectives" \n
       "			_obj = ([_OPCOM_HANDLER,""objectives"",[]] call AliVE_fnc_HashGet);" \n
       "			_unassigned = ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""unassigned""} count _obj);" \n
       "			_attacking = ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""attacking""} count _obj);" \n
       "			_reserving = ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""reserving""} count _obj);" \n
       "			_defending = ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""defending""} count _obj);" \n
       "			_idle = ({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""idle""} count _obj);" \n
       "			_active = _attacking + _defending;" \n
       "" \n
       "			//AnalyzeClusterOccupation" \n
       "			_targetOccupation = [_OPCOM_HANDLER,""analyzeclusteroccupation"",[_side,_sideEnemy]] call ALiVE_fnc_OPCOM;" \n
       "			_targetsTaken = _targetOccupation select 0;" \n
       "			_targetsAttacked = _targetOccupation select 1;" \n
       "			_targetsTakenEnemy = _targetOccupation select 2;" \n
       "			_targetsAttackedEnemy = _targetOccupation select 3;" \n
       "" \n
       "			//AnalyzeResults - prepare orders" \n
       "				//Case Prio 3: Optional: Attack further unassigned objectives" \n
       "				if (_active < ([_OPCOM_HANDLER,""simultanobjectives"",3] call ALiVE_fnc_HashGet)) then {" \n
       "					if ((({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""unassigned""} count _obj) > 0)) then {_targetsWithState = ""unassigned""};" \n
       "				};" \n
       "" \n
       "				//Case Prio 2: Defend all taken objectives" \n
       "				[_OPCOM_HANDLER,""setstatebyclusteroccupation"",[_targetsAttacked,""defend""]] call ALiVE_fnc_OPCOM;" \n
       "				if ((({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""defend""} count _obj) > 0)) then {_targetsWithState = ""defend""};" \n
       "" \n
       "				//Case Prio 1: Attack all enemy occupied objectives" \n
       "				[_OPCOM_HANDLER,""setstatebyclusteroccupation"",[_targetsTakenEnemy,""attack""]] call ALiVE_fnc_OPCOM;" \n
       "				if ((({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""attack""} count _obj) > 0)) then {_targetsWithState = ""attack""};" \n
       "" \n
       "				//Case Prio 0: Secure all taken objectives" \n
       "				[_OPCOM_HANDLER,""setstatebyclusteroccupation"",[_targetsTaken,""reserve""]] call ALiVE_fnc_OPCOM;" \n
       "				if ((({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""reserve""} count _obj) > 0)) then {_targetsWithState = ""reserve""};" \n
       "" \n
       "				//Select orders and execute" \n
       "				if !(isnil ""_targetsWithState"") then {_orders = [_OPCOM_HANDLER,""selectordersbystate"",_targetsWithState] call ALiVE_fnc_OPCOM};" \n
       "				if !(isnil ""_orders"") then {_OPCOM_DATA = _orders};" \n
       "" \n
       "				// debug ---------------------------------------" \n
       "				if(_debug) then {" \n
       "					 [""OPCOM %8 analyzed: Total of %1 targets | unassigned: %2 | assigned: %3 | completed: %4 | defending: %5 | secured: %6 | internal: %7""," \n
       "						 count _obj," \n
       "						({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""unassigned""} count _obj), " \n
       "						({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""attacking""} count _obj)," \n
       "						({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""reserving""} count _obj)," \n
       "						({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""defending""} count _obj)," \n
       "						({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""idle""} count _obj)," \n
       "						({([_x,""opcom_state""] call AliVE_fnc_HashGet) == ""internal""} count _obj)," \n
       "						_side" \n
       "					] call ALIVE_fnc_dumpR; " \n
       "					//[] call ALIVE_fnc_timer;" \n
       "				};" \n
       "				// debug ---------------------------------------" \n
       "" \n
       "				_busy = false;" \n
       "		};" \n
       "" \n
       "		//Execute analyzed orders" \n
       "		case (""execute"") : {" \n
       "			_operation = [_DATA_VALUE,""opcom_orders""] call AliVE_fnc_HashGet;" \n
       "" \n
       "			switch (_operation) do {" \n
       "				case (""attack"") : {" \n
       "					_attack = _DATA_VALUE;" \n
       "				};" \n
       "				case (""defend"") : {" \n
       "					_defend = _DATA_VALUE;" \n
       "				};" \n
       "				case (""reserve"") : {" \n
       "					_reserve = _DATA_VALUE;" \n
       "				};" \n
       "				//Custom" \n
       "			};" \n
       "" \n
       "			// debug ---------------------------------------" \n
       "			if(_debug) then { [""OPCOM orders TACOM to %1 target %2"",([_DATA_VALUE,""opcom_orders""] call AliVE_fnc_HashGet),([_DATA_VALUE,""objectiveID""] call AliVE_fnc_HashGet)] call ALIVE_fnc_dumpR; };" \n
       "			// debug ---------------------------------------" \n
       "		};" \n
       "" \n
       "		//Handle TACOM confirmation by state" \n
       "		case (""confirmed"") : {" \n
       "			_confirmed = _DATA_VALUE select 0;" \n
       "			_data = _DATA_VALUE select 1;" \n
       "			_target = _data select 0;" \n
       "			_return = _data select 1;" \n
       "			_operation = [_target,""opcom_orders""] call AliVE_fnc_HashGet;" \n
       "			_pos = [_target,""center""] call AliVE_fnc_HashGet;" \n
       "" \n
       "			if (_confirmed) then {" \n
       "				switch (_operation) do {" \n
       "					case (""attack"") : {" \n
       "						[_target,""opcom_state"",""attacking""] call AliVE_fnc_HashSet;" \n
       "					};" \n
       "					case (""defend"") : {" \n
       "						[_target,""opcom_state"",""defending""] call AliVE_fnc_HashSet;" \n
       "					};" \n
       "					case (""reserve"") : {" \n
       "						[_target,""opcom_state"",""reserving""] call AliVE_fnc_HashSet;" \n
       "					};" \n
       "					default {};" \n
       "				};" \n
       "				" \n
       "				//Trigger new OPCOM analysis after TACOM confirmation including TACOMs answer" \n
       "				_OPCOM_DATA = [""analyze"",_return];" \n
       "" \n
       "				// debug ---------------------------------------" \n
       "				if(_debug) then { [""TACOM confirmed - %1 %2! Answer was %3!"",([_target,""opcom_state""] call AliVE_fnc_HashGet),([_target,""objectiveID""] call AliVE_fnc_HashGet),_return] call ALIVE_fnc_dumpR; };" \n
       "				// debug ---------------------------------------" \n
       "" \n
       "			}  else {" \n
       "				[_target,""opcom_orders"",""none""] call ALiVE_fnc_HashSet;" \n
       "" \n
       "				// debug ---------------------------------------" \n
       "				if(_debug) then { [""TACOM could not confirm orders! Answer was %1"",_return] call ALIVE_fnc_dumpR; };" \n
       "				// debug ---------------------------------------" \n
       "" \n
       "			};" \n
       "		_busy = false;" \n
       "		};" \n
       "" \n
       "		//Handle TACOM order completion by state" \n
       "		case (""completed"") : {" \n
       "			_target = _DATA_VALUE;" \n
       "			_state = [_target,""opcom_state""] call AliVE_fnc_HashGet;" \n
       "			_targets = [_OPCOM_HANDLER,""objectives"",[]] call AliVE_fnc_HashGet;" \n
       "" \n
       "			switch (_state) do {" \n
       "				case (""attacking"") : {" \n
       "						[_target,""opcom_state"",""reserve""] call AliVE_fnc_HashSet;" \n
       "" \n
       "						// debug ---------------------------------------" \n
       "						if (_debug) then {([_target,""objectiveID""] call AliVE_fnc_HashGet) setMarkerColorLocal ""ColorWhite""};" \n
       "						// debug ---------------------------------------" \n
       "				};" \n
       "				case (""defending"") : {" \n
       "						[_target,""opcom_state"",""reserve""] call AliVE_fnc_HashSet;" \n
       "			" \n
       "						// debug ---------------------------------------" \n
       "						if (_debug) then {([_target,""objectiveID""] call AliVE_fnc_HashGet) setMarkerColorLocal ""ColorOrange""};" \n
       "						// debug ---------------------------------------" \n
       "				};" \n
       "				case (""reserving"") : {" \n
       "						[_target,""opcom_state"",""idle""] call AliVE_fnc_HashSet;" \n
       "" \n
       "						// debug ---------------------------------------" \n
       "						if (_debug) then {([_target,""objectiveID""] call AliVE_fnc_HashGet) setMarkerColorLocal _colorside};" \n
       "						// debug ---------------------------------------" \n
       "				};" \n
       "			};" \n
       "			" \n
       "			//Trigger new OPCOM analysis" \n
       "			_OPCOM_DATA = [""analyze"",nil]; _busy = false;" \n
       "		};" \n
       "" \n
       "		case (""custom"") : {_custom = _DATA_VALUE};" \n
       "		default {};" \n
       "	};" \n
       "" \n
       "};" \n
       "" \n
       "_lastAnalyze = time;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "ATTACK_Condition">*/
        class ATTACK_Condition
        {
          priority = 5.000000;
          to="ORDER_TACOM";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_attack"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "DEFEND_condition">*/
        class DEFEND_condition
        {
          priority = 4.000000;
          to="ORDER_TACOM";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_defend"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "RESERVE_conditio">*/
        class RESERVE_conditio
        {
          priority = 3.000000;
          to="ORDER_TACOM";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_reserve"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "CUSTOM_condition">*/
        class CUSTOM_condition
        {
          priority = 2.000000;
          to="ORDER_TACOM";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_custom"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "OPCOM_FEEDER">*/
        class OPCOM_FEEDER
        {
          priority = 1.000000;
          to="ANALYZE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"time - _lastAnalyze > 60"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "OPCOM_RECEIVER">*/
        class OPCOM_RECEIVER
        {
          priority = 0.000000;
          to="COLLECT_TO_QUEUE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_OPCOM_DATA"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "ORDER_TACOM">*/
    class ORDER_TACOM
    {
      name = "ORDER_TACOM";
      init = /*%FSM<STATEINIT""">*/"_operation = nil;" \n
       "" \n
       "//prepare transmission" \n
       "if !(isnil ""_attack"") then {_operation = ""attack""};" \n
       "if !(isnil ""_defend"") then {_operation = ""defend""};" \n
       "if !(isnil ""_reserve"") then {_operation = ""reserve""};" \n
       "if !(isnil ""_custom"") then {_operation = ""custom""};" \n
       "" \n
       "//transmit" \n
       "switch (_operation) do {" \n
       "		case ( ""attack"") : {	_TACOM_FSM setFSMVariable [""_TACOM_DATA"",[""analyze"",_attack]];};" \n
       "		case (""defend"") : {_TACOM_FSM setFSMVariable [""_TACOM_DATA"",[""analyze"",_defend]];};" \n
       "		case (""reserve"") : {_TACOM_FSM setFSMVariable [""_TACOM_DATA"",[""analyze"",_reserve]];};" \n
       "		case (""custom"") : {};" \n
       "		default {};" \n
       "};"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "TACOM_NOT_CONFIR">*/
        class TACOM_NOT_CONFIR
        {
          priority = 0.000000;
          to="NOT_BUSY";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_OPCOM_DATA"") && {(_OPCOM_DATA select 0) == ""confirmed""} && {!((_OPCOM_DATA select 1) select 0)};"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "TACOM_CONFIRM">*/
        class TACOM_CONFIRM
        {
          priority = 0.000000;
          to="NOT_BUSY_1";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_OPCOM_DATA"") && {(_OPCOM_DATA select 0) == ""confirmed""} && {(_OPCOM_DATA select 1) select 0};"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "INITIALIZE">*/
    class INITIALIZE
    {
      name = "INITIALIZE";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_DATA = [""init"",true];"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "OPCOM_RECEIVER">*/
        class OPCOM_RECEIVER
        {
          priority = 0.000000;
          to="COLLECT_TO_QUEUE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_OPCOM_DATA"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "NOT_BUSY">*/
    class NOT_BUSY
    {
      name = "NOT_BUSY";
      init = /*%FSM<STATEINIT""">*/"_busy = false;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "OPCOM_RECEIVER">*/
        class OPCOM_RECEIVER
        {
          priority = 0.000000;
          to="COLLECT_TO_QUEUE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_OPCOM_DATA"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "NOT_BUSY_1">*/
    class NOT_BUSY_1
    {
      name = "NOT_BUSY_1";
      init = /*%FSM<STATEINIT""">*/"_busy = false;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "OPCOM_RECEIVER">*/
        class OPCOM_RECEIVER
        {
          priority = 0.000000;
          to="COLLECT_TO_QUEUE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(isnil ""_OPCOM_DATA"");"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "COLLECT_TO_QUEUE">*/
    class COLLECT_TO_QUEUE
    {
      name = "COLLECT_TO_QUEUE";
      init = /*%FSM<STATEINIT""">*/"_OPCOM_QUEUE set [count _OPCOM_QUEUE,_OPCOM_DATA];" \n
       "_OPCOM_DATA = nil;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "ENTRIES_IN_QUEUE">*/
        class ENTRIES_IN_QUEUE
        {
          priority = 0.000000;
          to="ANALYZE";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(count _OPCOM_QUEUE > 0) && !(_busy);"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
  };
  initState="INIT";
  finalStates[] =
  {
  };
};
/*%FSM</COMPILE>*/