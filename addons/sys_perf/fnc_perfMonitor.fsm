/*%FSM<COMPILE "scriptedFSM.cfg, fnc_perfMonitor">*/
/*%FSM<HEAD>*/
/*
item0[] = {"wait",2,250,-75.000000,-350.000000,25.000000,-300.000000,0.000000,"wait"};
item1[] = {"monitor",4,4314,50.000000,-350.000000,150.000000,-300.000000,0.000000,"monitor"};
item2[] = {"init",0,250,-75.000000,-500.000000,25.000000,-450.000000,0.000000,"init"};
item3[] = {"first",4,218,-75.000000,-425.000000,25.000000,-375.000000,0.000000,"first"};
item4[] = {"finit",1,250,-75.000000,-650.000000,25.000000,-600.000000,0.000000,"finit"};
item5[] = {"already",4,218,-75.000000,-575.000000,25.000000,-525.000000,1.000000,"already"};
item6[] = {"abort",4,218,100.000000,-500.000000,200.000000,-450.000000,5.000000,"abort"};
link0[] = {0,1};
link1[] = {0,6};
link2[] = {1,0};
link3[] = {2,3};
link4[] = {2,5};
link5[] = {3,0};
link6[] = {5,4};
link7[] = {6,4};
globals[] = {25.000000,1,0,0,0,640,480,1,20,6316128,1,-244.048615,219.048615,-189.308716,-700.813293,861,951,1};
window[] = {2,-1,-1,-32000,-32000,841,75,1097,75,3,879};
*//*%FSM</HEAD>*/
class FSM
{
  fsmName = "fnc_perfMonitor";
  class States
  {
    /*%FSM<STATE "wait">*/
    class wait
    {
      name = "wait";
      init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/"_c = _c + 1;" \n
       ""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "abort">*/
        class abort
        {
          priority = 5.000000;
          to="finit";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(_abort)"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/"diag_log format[ ""perfMonitor.fsm is aborting. Abort :%1"", _abort] ;"/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "monitor">*/
        class monitor
        {
          priority = 0.000000;
          to="wait";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(diag_tickTime >= _Next)"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/"// FPS & CPS" \n
           "_data = [ [""Type"",""Data""],[""FPS"",round (diag_fps*1000)] , [""FPSMIN"", round (diag_fpsmin*1000)],  [""CPS"",(_c/_INTERVAL)] ];" \n
           "" \n
           "// Units" \n
           "_units = allUnits;" \n
           "_Players = {(alive _x)&&(isPlayer _x)} count _units;" \n
           "_locAIs = {(alive _x)&&(local _x)} count _units;" \n
           "_remAIs = ({alive _x} count _units) - _Players - _locAIs;" \n
           "_data = _data + [ [""PLAYERS"", _Players],[""LOCAI"",_locAIs] , [""REMAI"",_remAIs ]];" \n
           "" \n
           "//Objects" \n
           "if (_countObjects) then {" \n
           "        _MissObj = count allMissionObjects ""All"";" \n
           "	_data = _data + [ [""Objects"", _MissObj] ];" \n
           "};" \n
           "" \n
           "// Profiles" \n
           "if !(isnil ""Alive_ProfileHandler"") then {" \n
           "	private [""_active"",""_inactive"",""_unitCount"",""_activeCount"",""_inactiveCount"",""_unitCount"",""_vehicleCount""];" \n
           "	_active = [ALIVE_profileHandler, ""getActiveEntities""] call ALIVE_fnc_profileHandler;" \n
           "	 _activeCount = count _active;" \n
           " " \n
           "	// not spawned" \n
           "	_inactive = [ALIVE_profileHandler, ""getInActiveEntities""] call ALIVE_fnc_profileHandler;" \n
           "	_inactiveCount = count _inactive;" \n
           "" \n
           "	  // individual units" \n
           "	 _unitCount = [ALIVE_profileHandler, ""getUnitCount""] call ALIVE_fnc_profileHandler;" \n
           "" \n
           "	  // vehicles" \n
           "	   _vehicleCount = [ALIVE_profileHandler, ""getVehicleCount""] call ALIVE_fnc_profileHandler;" \n
           " " \n
           "	 _data = _data +  [ [""Active"", _activeCount],  [""Inactive"", _inactiveCount], [""Units"", _unitCount], [""Vehicles"", _vehicleCount]];" \n
           "};" \n
           "" \n
           "diag_log format[""perfMonitor.fsm message sent: %1"", _data];" \n
           "					" \n
           "// Send data to server to be written to DB" \n
           "ALIVE_SYS_PERF_UPDATE_PERF = _data;" \n
           "publicVariableServer ""ALIVE_SYS_PERF_UPDATE_PERF"";" \n
           "" \n
           "_Next = diag_TickTime + _INTERVAL;" \n
           "_c = 0;"/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "init">*/
    class init
    {
      name = "init";
      init = /*%FSM<STATEINIT""">*/"" \n
       "if !(isDedicated) exitWith {" \n
       "	diag_log (""perfMonitor.fsm exiting - not dedicated server"");" \n
       "};" \n
       "" \n
       "diag_log (""perfMonitor.fsm started"");" \n
       "_abort = false;" \n
       "" \n
       "// count Objects or not" \n
       "_countObjects = true;" \n
       "" \n
       "// variable for counting the number of condition evaluations" \n
       "_c = 0;" \n
       "" \n
       "// Number of alive units impacting performance" \n
       "_Players = 0; // impacts FPS" \n
       "_locAIs = 0; // impacts FCEF" \n
       "_remAIs = 0; // sum of all AI not local" \n
       "_MissObj = 0; // number of all Mission objects" \n
       "_profiles = 0; // Number of virtual profiles" \n
       "" \n
       "// define the minimal time interval in seconds" \n
       "_INTERVAL = 60;" \n
       "" \n
       "_Next = diag_TickTime;" \n
       "" \n
       "_units =[];" \n
       "" \n
       "diag_log (""perfMonitor.fsm init completed"");"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/"(isDedicated)"/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "already">*/
        class already
        {
          priority = 1.000000;
          to="finit";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(!isnil (""PerfMonRunning"") || !(isDedicated))"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/"diag_log format[ ""perfMonitor.fsm already started or is client machine - IsDedicated:%1"", isDedicated] ;"/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "first">*/
        class first
        {
          priority = 0.000000;
          to="wait";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(isnil (""ASMRunning"") && isDedicated)"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/"" \n
           "PerfMonRunning = true;" \n
           "" \n
           "active = true;" \n
           "" \n
           "_data = [ [""Type"", ""FSMStarted""]  ];" \n
           "					" \n
           "// Send data to server to be written to DB" \n
           "ALIVE_SYS_PERF_UPDATE_PERF = _data;" \n
           "publicVariableServer ""ALIVE_SYS_PERF_UPDATE_PERF"";" \n
           "" \n
           "" \n
           "diag_log (""perfMonitor.fsm start message sent"");"/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "finit">*/
    class finit
    {
      name = "finit";
      init = /*%FSM<STATEINIT""">*/"diag_log ""perfMonitor.fsm is shutting down"" ;" \n
       ""/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
      };
    };
    /*%FSM</STATE>*/
  };
  initState="init";
  finalStates[] =
  {
    "finit"
  };
};
/*%FSM</COMPILE>*/